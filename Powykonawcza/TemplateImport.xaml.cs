using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using Powykonawcza.DAL;
using Powykonawcza.Model.Szablon;
using Powykonawcza.Services;

namespace Powykonawcza
{
    /// <summary>
    ///     Interaction logic for SzablonyImportu.xaml<!--AutoGeneratedColumns="gr1_AutoGeneratedColumns" -->
    /// </summary>
    public partial class SzablonyImportu : Window
    {
        public SzablonyImportu()
        {
            InitializeComponent();
            gr1.ItemsSource = PopulateSzablon();
            GridItems.CollectionChanged += GridItems_CollectionChanged;
        }

        //public IEnumerable<SzablonItem> CurrentTemplate()
        //{
        //    var rows = GetDataGridRows(gr1);
        //    var itemsSource = gr1.ItemsSource;

        //    for (var i = 0; i < GridItems.Count; i++)
        //        if (GridItems[i].Import)
        //            yield return GridItems[i];
        //}

        public IEnumerable<DataGridRow> GetDataGridRows(DataGrid grid)
        {
            var itemsSource = grid.ItemsSource;
            if (null == itemsSource) yield return null;
            foreach (var item in itemsSource)
            {
                var row = grid.ItemContainerGenerator.ContainerFromItem(item) as DataGridRow;
                if (null != row) yield return row;
            }
        }


        private void clik_zapisz(object sender, RoutedEventArgs e)
        {
            var rows = GetDataGridRows(gr1);
            var itemsSource = gr1.ItemsSource;

            if (!Powykonawcza.Services.WPFtemplateService.CheckRequiredBeforeSave(GridItems))
            {
                MessageBox.Show("Pola Point,X,Y,Z są wymagane do importu");
                return;
            }
            //
            try
            {
                SaveTemplate();
                MessageBox.Show("Zapis wykonany");
            }
            catch
            {
                MessageBox.Show("Problem z zapisem pliku szablonu");
            }

            btnzapisz.IsEnabled = false;
            Close();
        }



        private void CloseCommandBinding_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            // if (MessageBox.Show("Close?", "Close", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
            Close();
        }

        private void gr1_AutoGeneratedColumns(object sender, EventArgs e)
        {
        }

        private void gr1_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {
            btnzapisz.IsEnabled = true;
        }

        private void gr1_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
        }

        private void GridItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            btnzapisz.IsEnabled = true;
        }

        private void MenuItem_Clickdown(object sender, RoutedEventArgs e)
        {
            //Get the clicked MenuItem
            var menuItem = (MenuItem)sender;

            //Get the ContextMenu to which the menuItem belongs
            var contextMenu = (ContextMenu)menuItem.Parent;

            //Find the placementTarget
            var item = (DataGrid)contextMenu.PlacementTarget;

            //Get the underlying item, that you cast to your object that is bound
            //to the DataGrid (and has subject and state as property)
            var itm = (SzablonItem)item.SelectedCells[0].Item;

            //int lp=l.Find((x => x.nazwa.Contains(itm.nazwa))).;

            gr1.ItemsSource = Powykonawcza.Services.WPFtemplateService.MoveItemDown(GridItems, itm);
            btnzapisz.IsEnabled = true;
        }


        private void MenuItem_Clickup(object sender, RoutedEventArgs e)
        {
            //Get the clicked MenuItem
            var menuItem = (MenuItem)sender;

            //Get the ContextMenu to which the menuItem belongs
            var contextMenu = (ContextMenu)menuItem.Parent;

            //Find the placementTarget
            var item = (DataGrid)contextMenu.PlacementTarget;

            //Get the underlying item, that you cast to your object that is bound
            //to the DataGrid (and has subject and state as property)
            var itm = (SzablonItem)item.SelectedCells[0].Item;

            //int lp=l.Find((x => x.nazwa.Contains(itm.nazwa))).;
            
            gr1.ItemsSource =  Powykonawcza.Services.WPFtemplateService.MoveItemUp(GridItems, itm);
            btnzapisz.IsEnabled = true;
        }



        private ObservableCollection<SzablonItem> PopulateSzablon()
        {
            IFormatter formatter = new BinaryFormatter();
            //
            try
            {
                return GridItems = Powykonawcza.Services.WPFtemplateService.TryLoadTemplateFromFile();
            }
            catch
            {
                //return GridItems = Powykonawcza.Services.WPFtemplateService.PopulateDefaultTemplate();
                var item = Powykonawcza.Services.WPFtemplateService.PopulateDefaultTemplate();
                foreach (var i in item)
                    GridItems.Add(i);
                return GridItems;
            }
        }
         

        private void SaveTemplate()
        {
            // JsonUtils.SaveJson(@"Template.dat", GridItems);
            TemplateOperation.SaveTemplate(GridItems);
        }

        private void Window_Closing(object sender, CancelEventArgs e)
        {
            var tmpItems = GridItems;
        }

        public ObservableCollection<SzablonItem> GridItems = new ObservableCollection<SzablonItem>();

        public List<SzablonItem> ListImport = null;
    }
}